第二章:线程安全性
线程安全:多线程访问某类而它始终能保持表现正确行为;
无状态对象:不包含非final全局变量，并不引用其他类(无状态对象一定线程安全)
状态一致性:并发修改某类多个全局变量是需确保在同一锁内执行(保持原子性)
同步块(锁)注意三大原则:安全性(必须),简单性(其次),性能(最后),耗时或者无法完成的代码，严禁加锁

第二章:对象共享
volatile变量:仅保证可见性，不保证原子性
线程写的时候不在同步块,读则进入同步块

对象发布:
令对象能在当前作用域外访问(例如:get())
对象溢出:
不应该发布的对象但又发布之时,称为对象溢出

线程封闭:单线程内访问数据,无需同步(例如jdbc connect对象);
只读共享:并发访问对象而不修改;
线程安全共享:对象内部实现线程安全;
保护对象:被保护对象只能通过获取锁才能访问

ThreadLocal对象:用于防止对可变的单实例变量或者全局变量进行共享；
不适用于线程池,因为线程池中线程有复用特性;

不可变对象一定是线程安全的，
不可变对象定义:(并)
1,final class,
2,final变量
3,对象正确创建,this引用并没有溢出

正确发布对象:(或)
1,静态方法初始一个对象引用(此对象必须为static)
2,对象引用为volatile或者原子对象AtomicReferance
3,final修饰
4,对象引用保存由锁保护的域中