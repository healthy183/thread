// 没有抽象方法的抽象类，就是不想让人直接使用
public abstract  AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer
   |-Node   // 抽象静态内部类，waitStatus中，CANCELLED(1)表示取消，0表示默认，-1表示note.next挂起
   |-ExclusiveNode extends Node  // 静态final内部类，无具体方法
   |-SharedNode extends Node      // 静态final内部类，无具体方法
   |-ConditionNode extends Node implements ForkJoinPool.ManagedBlocker  // 静态final内部类
   |-ConditionObject implements Condition   // 内部类

全局变量分析
static final int WAITING   = 1;          // must be 1，
static final int CANCELLED = 0x80000000; // must be negative(负数)
static final int COND      = 2;          // in a condition wait

/**
 * Head of the wait queue, lazily initialized.
  * 等待队列头
  * 延迟初始化;或者通过 setHead() 设置
  * 状态一定不会是 CANCELLED(负数)
  * 头结点是虚拟结点, 所以一定不会关联线程
 */
private transient volatile Node head;

/**
 * Tail of the wait queue. After initialization, modified only via casTail.
 * 等待队列尾
*  延迟初始化;只能通过 enq() 添加新的结点
 */
private transient volatile Node tail;

/**
 * The synchronization state.
  * 当前aqs状态 0表示锁是无占用，1或者以上是有占用
 */
private volatile int state;

其他全局变量
private static final Unsafe U = Unsafe.getUnsafe();
private static final long STATE
    = U.objectFieldOffset(AbstractQueuedSynchronizer.class, "state");
private static final long HEAD
    = U.objectFieldOffset(AbstractQueuedSynchronizer.class, "head");
private static final long TAIL
    = U.objectFieldOffset(AbstractQueuedSynchronizer.class, "tail");

static {
    Class<?> ensureLoaded = LockSupport.class;
}

  // NonfairSync#lock()中，获取锁失败则调用此方法
  // FairSync#lock()中，则是直接调用
  public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }

    // 请求锁，默认抛异常，可以看子类(例如 NonfairSync、FairSync)实现
   protected boolean tryAcquire(int arg) {
          throw new UnsupportedOperationException();
      }

// acquire(int)中,Note入参是链尾;
// 挂起线程和后续被唤醒线程继续锁资源的逻辑
final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor(); // 取出链表上一个节点
                if (p == head && tryAcquire(arg)) { // 如果是链头并且能获得锁
                    setHead(node);  // 设置链头
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;  // 不打断
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())  // 执行LockSupport.park(this)并触发线程打断Thread.interrupted();
                    interrupted = true;
            }
        } finally {
            if (failed)   // 取消排队等待
                cancelAcquire(node);
        }
    }

  // 获取锁失败，设置到链尾(排队)，并返回
  private Node addWaiter(Node mode) {
        Node node = new Node(Thread.currentThread(), mode);
        // Try the fast path of enq; backup to full enq on failure
        Node pred = tail; // 取出链尾
        if (pred != null) {
            node.prev = pred;
            if (compareAndSetTail(pred, node)) { // 设置链尾
                pred.next = node;
                return node; //返回最新的链尾
            }
        }
        enq(node);  //死循环设置链尾,意思是将note加入等待队列
        return node;
    }

    // 请求锁失败后是否Park线程
    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
        int ws = pred.waitStatus;
        if (ws == Node.SIGNAL)  // 上一个节点ws == SIGNAL(-1),代表可以挂起线程(等待通知)
            return true;
        if (ws > 0) {  // CANCELLED(1)表示取消了
            do {
                node.prev = pred = pred.prev; // 拆链再组装
            } while (pred.waitStatus > 0); // 必须是CANCELLED( 取消状态)
            pred.next = node;
        } else {
            compareAndSetWaitStatus(pred, ws, Node.SIGNAL); // native方法,cas方式将ws改成-1(挂起)
        }
        return false;
    }

// 释放锁
  public final boolean release(int arg) {
        if (tryRelease(arg)) { // 要看子类实现，只代表释放一次，如果是可重入锁不代表完全释放
            Node h = head;
            if (h != null && h.waitStatus != 0)  // 链头不为空且状态不是空闲(无占有锁)
                unparkSuccessor(h);
            return true;
        }
        return false;
    }


     private void unparkSuccessor(Node node) {
            /*
             * If status is negative (i.e., possibly needing signal) try
             * to clear in anticipation of signalling.  It is OK if this
             * fails or if status is changed by waiting thread.
             */
            int ws = node.waitStatus;
            if (ws < 0){
                compareAndSetWaitStatus(node, ws, 0); // 设置节点状态为o
            }
            /*
             * Thread to unpark is held in successor, which is normally
             * just the next node.  But if cancelled or apparently null,
             * traverse backwards from tail to find the actual
             * non-cancelled successor.
             */
            Node s = node.next;
            if (s == null || s.waitStatus > 0) {   // 清空CANCELLED(1)的节点
                s = null;
                for (Node t = tail; t != null && t != node; t = t.prev)
                    if (t.waitStatus <= 0)
                        s = t;
            }
            if (s != null){
                LockSupport.unpark(s.thread); // 通知等待线程进行抢锁
            }
        }


     final int fullyRelease(Node node) {
            boolean failed = true;
            try {
                // 为什么拿到原来的资源状态,并保存下来?
              // 因为针对于可重入锁/或者读写锁来说, 被唤醒时继续执行,
              必须拿到原来所有的锁(比如两次重入锁或一个读锁一个写锁), 而不是仅仅一个锁就够了.
                int savedState = getState();
                if (release(savedState)) {
                    failed = false;
                    return savedState;
                } else {
                    throw new IllegalMonitorStateException();
                }
            } finally {
                if (failed)
                    node.waitStatus = Node.CANCELLED;
            }
        }


     final boolean isOnSyncQueue(Node node) {
             // 快速判断在不在 SyncQueue 上。
             if (node.waitStatus == Node.CONDITION || node.prev == null)
                 return false;
             if (node.next != null) // If has successor, it must be on queue
                 return true;

             // 因为设置 prev 和入队(设置 tail) 不是原子性的
             // 存在 prev 不为空,但是由于 CAS 失败还未真正入队的情况。见 enq()
             // 所以从后往前再次确认入队(因为会重试的)
             return findNodeFromTail(node);
         }


     final boolean transferAfterCancelledWait(Node node) {
          // 如果在检查中断之前, 已经被唤醒了, 那状态就是 0了, 这里 CAS 会失败
            if (compareAndSetWaitStatus(node, Node.CONDITION, 0)) {
                enq(node);
                // 要求抛出异常
                return true;
            }
            /*
             * If we lost out to a signal(), then we can't proceed
             * until it finishes its enq().  Cancelling during an
             * incomplete transfer is both rare and transient, so just
             * spin.
             */
            // 那就等待唤醒流程执行完(也会把下一个等待的结点,放到 SyncQueue 上).
            while (!isOnSyncQueue(node))
                Thread.yield(); // 当前线程暂时不执行，让相同优先级的线程先执行
            return false;
        }

        // 其实唤醒和中断醒来，区别在于中断是自己处理自己，而唤醒是处理自己后面等待的线程。
        final boolean transferForSignal(Node node) {
                /*
                 * If cannot change waitStatus, the node has been cancelled.
                 * 已经被中断处理了
                 */
                if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))
                    return false;
                Node p = enq(node);
                int ws = p.waitStatus;
                // ws > 0 说明已经取消了, 直接唤醒
                // 要么前面结点的状态刚好在变化, 先直接唤醒. 反正如果失败了, 也会重新阻塞的
                if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))
                    LockSupport.unpark(node.thread);
                return true;
            }

          // 当前线程前是否还有其他排队的线程，一般用作公平锁的实现中
          public final boolean hasQueuedPredecessors() {
                // The correctness of this depends on head being initialized
                // before tail and on head.next being accurate if the current
                // thread is first in queue.
                Node t = tail; // Read fields in reverse initialization order
                Node h = head;
                Node s;
                return h != t &&
                    ((s = h.next) == null || s.thread != Thread.currentThread());
            }


          public final void acquireSharedInterruptibly(int arg)
                    throws InterruptedException {
                if (Thread.interrupted())
                    throw new InterruptedException();
                //  调用子类方法，CountDownLatch是判断stat是否为0，是的返回1，否则-1
                if (tryAcquireShared(arg) < 0)
                    doAcquireSharedInterruptibly(arg);
            }

            // 获取共享锁
            private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {
                final Node node = addWaiter(Node.SHARED); // 双向列表中加入一个新note，并返回
                boolean failed = true;
                try {
                    for (;;) {
                        final Node p = node.predecessor(); // 拿出当前节点的上一个节点
                        if (p == head) { // 如果是头
                            // 请求共享锁
                            // 调用子类方法，CountDownLatch是判断stat是否为0，是的返回1，否则-1
                            int r = tryAcquireShared(arg);
                            if (r >= 0) {
                                setHeadAndPropagate(node, r);
                                p.next = null; // help GC
                                failed = false;
                                return;
                            }
                        }
                        if (shouldParkAfterFailedAcquire(p, node) &&
                            parkAndCheckInterrupt())  // 执行LockSupport.park(this)并触发线程打断Thread.interrupted();
                            throw new InterruptedException();
                    }
                } finally {
                    if (failed)
                        cancelAcquire(node);
                }
            }

             // 设置双向链表的head
             private void setHeadAndPropagate(Node node, int propagate) {
                    Node h = head; // Record old head for check below
                    setHead(node);

                    if (propagate > 0 || h == null || h.waitStatus < 0 ||
                        (h = head) == null || h.waitStatus < 0) {
                        Node s = node.next;
                        if (s == null || s.isShared())
                            doReleaseShared();
                    }
                }


          private void doReleaseShared() {
              for (;;) {
                  Node h = head;
                  if (h != null && h != tail) {
                      int ws = h.waitStatus;
                      if (ws == Node.SIGNAL) {
                          if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                              continue;            // loop to recheck cases
                          unparkSuccessor(h); // 将note的线程unpark
                      }
                      // 将note的stat改成PROPAGATE，Node.PROPAGATE(传播) 是-3
                      else if (ws == 0 &&
                               !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                          continue;                // loop on failed CAS
                  }
                  if (h == head)                   // loop if head changed
                      break;
              }
          }

          // 释放共享资源
           public final boolean releaseShared(int arg) {
                  // 调用子类，CountDownLatch是stat减1后并且stat是0则返回ture
                  if (tryReleaseShared(arg)) {
                      doReleaseShared();
                      return true;
                  }
                  return false;
              }







