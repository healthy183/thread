1，优化代码前提是保证正确性；

2，可伸缩性:增加硬件能提高运行的效率比

3,amdahl定律
程序在理论上能够实现最高加速比
加速比 <= 1/(f+((1-f)/n));
f:必须串行代码的百分比



4,上下文切换：
可运行线程超过cpu数,系统将正在运行的线程(特别是阻塞线程)调度出来，让其他线程能够使用cpu

5,jvm线程阻塞分两种
5.1,自循环(适合等待时间短)
5.2,线程挂起(适合等待时间长)

6,减少线程阻塞(锁竞争)能提高性能和伸缩性(推荐concurrentHashMap分段锁原理)
6.1 减少持锁时间
6.2 减少请求锁频率
6.3 使用带有协调机制的独占锁，这些机制允许更高的并发性
6.4 尽量减少必须串行的代码量

7,分段锁应用原则
对象单一锁请求高于对象内数据锁请求

8,cpu没有充分使用
8.1 负载不总
8.2 I/O密集
8.3 外部限制
8.4 锁竞争
linux可用vmstat输出可运行状态但没有运行(无足够cpu)的线程数量

9 LinkBlockingQueue伸缩性高于ArrayBlockingQueue
链表put和take支持并发性更好的访问，
链表算法能将队列头节点更新操作和尾节点更新操作分离处理






